# ./docker-compose.yml

services:
  # Database Service
  db:
    image: postgres:15
    container_name: noteapp_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    # Add healthcheck:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s   # Check every 5 seconds
      timeout: 5s    # Wait max 5 seconds for the check
      retries: 5     # Try 5 times before marking as unhealthy

  # Backend Service
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: noteapp_backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ./Backend:/app
      - backend_node_modules:/app/node_modules
    environment:
      DATABASE_URL: ${DATABASE_URL}
      BACKEND_PORT: ${BACKEND_PORT}
    depends_on:
      db: # Now depends on the service being 'healthy'
        condition: service_healthy
    networks:
      - app-network

  # Frontend Service
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: noteapp_frontend
    ports:
      - "5173:5173"
    volumes:
      - ./Frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      NODE_ENV: development
    depends_on: # You might want this to depend on backend health too
      backend:
        condition: service_started # Or add a healthcheck to backend
    networks:
      - app-network

volumes:
  postgres_data:
  backend_node_modules:
  frontend_node_modules:

networks:
  app-network:
    driver: bridge